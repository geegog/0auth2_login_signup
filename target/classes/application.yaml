spring:
  datasource:
    url: jdbc:h2:mem:testdb?useSSL=false
    username: sa
    password:

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
  security:
    oauth2:
      client:
        registration:
#          google:
#            clientId:
#            clientSecret:
#            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
#            scope:
#              - email
#              - profile
          facebook:
            clientId: 384380652198169
            clientSecret: 7456b2f13e5dd68a02f7b0c229213889
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
#          github:
#            clientId:
#            clientSecret:
#            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
#            scope:
#              - user:email
#              - read:user
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
